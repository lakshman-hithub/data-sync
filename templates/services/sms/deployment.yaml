apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "howso-platform.sms.fullname" . }}
  labels:
    app.kubernetes.io/part-of: howso-platform
    app.kubernetes.io/component: scalability-management-service
    {{- include "howso-platform.sms.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.sms.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 10
  selector:
    matchLabels:
      {{- include "howso-platform.sms.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with .Values.sms.podAnnotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
        checksum/nats: {{ include (print $.Template.BasePath "/configmaps/configmap-nats-connection.yml") . | sha256sum }} 
        checksum/ums: {{ include (print $.Template.BasePath "/configmaps/configmap-ums-connection.yml") . | sha256sum }} 
        checksum/obj: {{ include (print $.Template.BasePath "/configmaps/configmap-object-store-connection.yml") . | sha256sum }} 
        checksum/redis: {{ include (print $.Template.BasePath "/configmaps/configmap-redis-connection.yml") . | sha256sum }} 
        checksum/restapi: {{ include (print $.Template.BasePath "/configmaps/configmap-restapi-connection.yml") . | sha256sum }} 
        checksum/pgplatform: {{ include (print $.Template.BasePath "/configmaps/configmap-postgres-platform-connection.yml") . | sha256sum }} 
        checksum/apitoken: {{ include (print $.Template.BasePath "/services/restapi/restapi-ums-api-token.yaml") . | sha256sum }}
        checksum/smstoken: {{ include (print $.Template.BasePath "/services/sms/sms-system-account-secret.yaml") . | sha256sum }}
        checksum/worker: {{ include (print $.Template.BasePath "/configmaps/configmap-worker-conf.yml") . | sha256sum }}
      labels:
        app.kubernetes.io/part-of: howso-platform
        app.kubernetes.io/component: scalability-management-service
        {{- include "howso-platform.sms.selectorLabels" . | nindent 8 }}
    spec:
      tolerations:
        {{- toYaml .Values.tolerations.services | nindent 8 }}
      {{- with .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: platform-sms-serviceaccount 
      securityContext:
        {{- toYaml .Values.sms.podSecurityContext | nindent 8 }}
      containers:
        - name: sms 
          securityContext:
            {{- toYaml .Values.sms.securityContext | nindent 12 }}
          image: {{ include "howso-platform.imagePath" (dict "root" $ "image" .Values.sms.image) | quote }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          envFrom:
          - configMapRef:
              name: platform-configmap
          - configMapRef:
              name: platform-configmap-postgres-platform-connection
          - configMapRef:
              name: platform-configmap-redis-connection 
          - configMapRef:
              name: platform-configmap-object-store-connection
          - configMapRef:
              name: platform-configmap-nats-connection
          - configMapRef:
              name: platform-configmap-replicated
          - configMapRef:
              name: platform-configmap-ums-connection
          - configMapRef:
              name: platform-configmap-restapi-connection
          - configMapRef:
              name: platform-configmap-worker-conf
          env:
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: HOWSO_PLATFORM_POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{if .Values.datastores.postgres.platform.existingSecret }}{{ .Values.datastores.postgres.platform.credentialsSecretName }}{{ else }}platform-postgres-platform-credentials{{ end }} 
                key: {{if .Values.datastores.postgres.platform.existingSecret }}{{ .Values.datastores.postgres.platform.passwordDataKey }}{{ else }}password{{ end }} 
          - name: HOWSO_RESTAPI_UMS_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: platform-api-v2-ums-api-token
                key: token
          - name: REQUESTS_CA_BUNDLE
            value: "/certs/platform-ca-publickey.crt"
          - name: HOWSO_LOG_LEVEL
            value: {{ if (.Values.sms.logLevel) }}{{ .Values.sms.logLevel | quote }}{{ else }}{{ .Values.logLevel | quote }}{{ end }}
          - name: HOWSO_LOG_FORMAT
            value: {{ if (.Values.sms.logFormat) }}{{ .Values.sms.logFormat | quote }}{{ else }}{{ .Values.logFormat | quote }}{{ end }}
          {{ if .Values.sms.timeouts.kubernetesRequestConnection }}
          - name: KUBERNETES_REQUEST_CONN_TIMEOUT
            value: {{ .Values.sms.timeouts.kubernetesRequestConnection | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.kubernetesRequestRead }}
          - name: KUBERNETES_REQUEST_READ_TIMEOUT
            value: {{ .Values.sms.timeouts.kubernetesRequestRead | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.natsCreateStream }}
          - name: NATS_CREATE_STREAM_TIMEOUT
            value: {{ .Values.sms.timeouts.natsCreateStream | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.natsCreateConsumer }}
          - name: NATS_CREATE_CONSUMER_TIMEOUT
            value: {{ .Values.sms.timeouts.natsCreateConsumer | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.natsJSAck }}
          - name: NATS_JETSTREAM_ACK_TIMEOUT
            value: {{ .Values.sms.timeouts.natsJSAck | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.natsJSReply }}
          - name: NATS_JETSTREAM_REPLY_TIMEOUT
            value: {{ .Values.sms.timeouts.natsJSReply | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.natsReply }}
          - name: NATS_REPLY_TIMEOUT
            value: {{ .Values.sms.timeouts.natsReply | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.inactivityUnloadPersistable }}
          - name: HOWSO_INACTIVITY_UNLOAD_PERSISTABLE
            value: {{ .Values.sms.timeouts.inactivityUnloadPersistable | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.inactivityDeletePersistable }}
          - name: HOWSO_INACTIVITY_DELETE_PERSISTABLE
            value: {{ .Values.sms.timeouts.inactivityDeletePersistable | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.inactivityDeleteUnnamedPersistable }}
          - name: HOWSO_INACTIVITY_DELETE_UNNAMED_PERSISTABLE
            value: {{ .Values.sms.timeouts.inactivityDeleteUnnamedPersistable | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.inactivityDeleteNonPersistable }}
          - name: HOWSO_INACTIVITY_DELETE_NON_PERSISTABLE
            value: {{ .Values.sms.timeouts.inactivityDeleteNonPersistable | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.inactivityUnloadCheckFrequency }}
          - name: HOWSO_INACTIVITY_UNLOAD_CHECK_FREQUENCY
            value: {{ .Values.sms.timeouts.inactivityUnloadCheckFrequency | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.kubernetesStateCheckMax }}
          - name: KUBERNETES_STATE_CHECK_MAX_TIMEOUT
            value: {{ .Values.sms.timeouts.kubernetesStateCheckMax | quote }}
          {{ end }}
          {{ if .Values.sms.timeouts.inactivityDeleteCheckFrequency }}
          - name: HOWSO_INACTIVITY_DELETE_CHECK_FREQUENCY
            value: {{ .Values.sms.timeouts.inactivityDeleteCheckFrequency | quote }}
          {{ end }}
          - name: HOWSO_MAX_TRAINEE_REPLICAS
            value: "0" 
          ports:
            - containerPort: 5555
          livenessProbe:
            exec:
              command:
              - /container_files/bin/healthcheck.sh
            failureThreshold: 3
            timeoutSeconds: 20
            periodSeconds: 60
          startupProbe:
            exec:
              command:
              - /container_files/bin/healthcheck.sh
            failureThreshold: 60 
            timeoutSeconds: 20
            periodSeconds: 10
            initialDelaySeconds: 20
          volumeMounts:
          - name: redis-password
            mountPath: /secrets/redis-password
            readOnly: true
          - name: objstore-credentials
            mountPath: /secrets/objstore-credentials
            readOnly: true
          - mountPath: /certs/
            name: {{ .Values.internalPKI.rootCASecretName }}
          - mountPath: /system-accounts/sms
            name: platform-sms-system-account-secret
          {{- if .Values.nats.tls.enabled }}
          - mountPath: /client-certs/nats/
            name: platform-sms-nats-client-tls
          {{- end }}
          {{- if .Values.datastores.postgres.platform.clientVerification }}
          - mountPath: /client-certs/postgres/
            name: postgres-client-tls
          {{- end }}
          {{- if and (.Values.datastores.objectStore.serverVerification) (.Values.datastores.objectStore.serverVerificationCustomCertChain) }}
          - mountPath: /access-certs/objstore
            name: object-store-crtchain
          {{- end }}
          {{- if .Values.datastores.postgres.platform.serverVerificationCustomCertChain }}
          - mountPath: /access-certs/postgres
            name: postgres-server-ca 
          {{- end }}
          {{- if .Values.datastores.redis.clientVerification }}
          - mountPath: /client-certs/redis/
            name: redis-client-tls
          {{- end }}
          {{- if and (.Values.datastores.redis.serverVerification) (.Values.datastores.redis.serverVerificationCustomCertChain) }}
          - mountPath: /access-certs/redis/
            name: redis-server-ca
          {{- end }}
          resources:
            {{- toYaml .Values.sms.resources | nindent 12 }}
      {{- with .Values.sms.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sms.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sms.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: redis-password
        secret:
          secretName: {{if .Values.datastores.redis.existingSecret }}{{ .Values.datastores.redis.credentialsSecretName }}{{ else }}platform-redis-credentials{{ end }}
      - name: objstore-credentials
        secret:
          defaultMode: 420
          secretName: {{ if .Values.datastores.objectStore.existingSecret }}{{ .Values.datastores.objectStore.credentialsSecretName }}{{ else }}platform-object-store-credentials{{ end }}
      {{- if .Values.nats.tls.enabled }}
      - name: platform-sms-nats-client-tls
        secret:
          defaultMode: 420
          secretName: platform-sms-nats-client-tls
      {{- end }}
      {{- if .Values.datastores.postgres.platform.clientVerification }}
      - name: postgres-client-tls
        secret:
          defaultMode: 420
          secretName: {{ .Values.datastores.postgres.platform.clientCertSecretName }} 
      {{- end }}
      - name: {{ .Values.internalPKI.rootCASecretName }}
        secret:
          defaultMode: 420
          secretName: {{ .Values.internalPKI.rootCASecretName }}
          items:
            - key: ca.crt
              path: platform-ca-publickey.crt
      {{- if .Values.datastores.postgres.platform.serverVerificationCustomCertChain }}
      - name: postgres-server-ca 
        secret:
          defaultMode: 420
          secretName: {{ default .Values.internalPKI.rootCASecretName .Values.datastores.postgres.platform.serverCertChainSecretName }}
          items:
            - key: ca.crt
              path: postgres-server-certchain.crt
      {{- end }}
      {{- if and (.Values.datastores.objectStore.serverVerification) (.Values.datastores.objectStore.serverVerificationCustomCertChain) }}
      - name: object-store-crtchain
        secret:
          defaultMode: 420
          secretName: {{ default .Values.internalPKI.rootCASecretName .Values.datastores.objectStore.serverCertChainSecretName }} 
          items:
            - key: ca.crt 
              path: object-store-certchain.crt
      {{- end }}
      {{- if .Values.datastores.redis.clientVerification }}
      - name: redis-client-tls
        secret:
          defaultMode: 420
          secretName: {{ .Values.datastores.redis.clientCertSecretName }} 
      {{- end }}
      {{- if and (.Values.datastores.redis.serverVerification) (.Values.datastores.redis.serverVerificationCustomCertChain) }}
      - name: redis-server-ca
        secret:
          defaultMode: 420
          secretName: {{ default .Values.internalPKI.rootCASecretName .Values.datastores.redis.serverCertChainSecretName }} 
          items:
            - key: ca.crt 
              path: redis-server-ca.crt
      {{- end }}
      # For kubernetes access
      - name: platform-sms-system-account-secret
        secret:
          defaultMode: 420
          secretName: platform-sms-system-account-secret
      automountServiceAccountToken: true